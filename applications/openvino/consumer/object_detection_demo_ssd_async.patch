--- main.cpp 2020-06-23 12:38:13.000000000 +0800
+++ main.cpp_changed    2020-04-01 01:06:21.000000000 +0800
@@ -80,6 +80,10 @@
         const size_t width  = (size_t) cap.get(cv::CAP_PROP_FRAME_WIDTH);
         const size_t height = (size_t) cap.get(cv::CAP_PROP_FRAME_HEIGHT);

+        cv::Size outputFrameSize(width, height);
+        cv::VideoWriter video;
+        video.open("vidfifo.mjpeg", cv::VideoWriter::fourcc('M', 'J', 'P', 'G'), 24, outputFrameSize, true);
+
         // read input (video) frame
         cv::Mat curr_frame;  cap >> curr_frame;
         cv::Mat next_frame;
@@ -244,7 +248,7 @@
         slog::info << "Start inference " << slog::endl;

         bool isLastFrame = false;
-        bool isAsyncMode = false;  // execution is always started using SYNC mode
+        bool isAsyncMode = true;  // execution is always started using SYNC mode
         bool isModeChanged = false;  // set to TRUE when execution mode is changed (SYNC<->ASYNC)

         typedef std::chrono::duration<double, std::ratio<1, 1000>> ms;
@@ -363,7 +367,7 @@
             }

             if (!FLAGS_no_show) {
-                cv::imshow("Detection results", curr_frame);
+                video.write(curr_frame);
             }

             t1 = std::chrono::high_resolution_clock::now();
@@ -417,4 +421,4 @@

     slog::info << "Execution successful" << slog::endl;
     return 0;
-}
+}
\ No newline at end of file
